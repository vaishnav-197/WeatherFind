{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oKAEMA,EACC,mCADDA,EAEE,2CAyHOC,MArHf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACEC,EADF,OAEkBF,mBAAS,IAF3B,mBAENG,EAFM,KAEIC,EAFJ,KA+Bb,OACE,yBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAM,GAAM,WAAsB,OAEtG,8BACG,yBAAKF,UAAU,SACb,4BAAI,uBAAGA,UAAU,cAAjB,iBAEF,yBAAKA,UAAU,cACb,2BACAG,KAAK,OACLH,UAAW,aACXI,YAAc,yBACdC,SAAW,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QAClCA,MAAQZ,EACRa,WAxCM,SAAAC,GACE,UAAXA,EAAIC,KACNC,MAAK,WAAMnB,EAAN,qBAA2BG,EAA3B,+BAAuDH,IAC1DoB,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UAoCY,oBAAhBlB,EAAQG,KACf,6BACG,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,YAAYF,EAAQqB,KAAnC,MAA4CrB,EAAQsB,IAAIC,SACxD,yBAAKrB,UAAU,QAlCX,SAACsB,GACnB,IAIIC,EAHO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAMzGL,EAAEM,YACjBC,EAAMP,EAAEQ,cAEZ,MAAM,IAAN,OAAWP,EAAX,YAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GAwBEE,CAAY,IAAIC,QAE3C,yBAAKhC,UAAU,eACX,yBAAKA,UAAU,QACZiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,SAGA,yBAAKF,UAAU,YACZF,EAAQA,QAAQ,GAAGG,MAGtB,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,SAAf,IAAwB,6BAAxB,IACIF,EAAQA,QAAQ,GAAGqC,YADvB,MAIH,yBAAKnC,UAAU,gBACZ,yBAAKA,UAAU,SACf,6BACA,6BACA,6BAHA,wBAKA,6BACA,6BACA,iCAUV,yBAAKA,UAAU,gBAEf,yBAAKA,UAAU,QAAf,yBAKD,yBAAKA,UAAU,UAGJ,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAGA,6BACA,6BAbX,kDAc+C,uBAAGoC,KAAK,mDAAR,IAA2D,uBAAGpC,UAAU,sBCtG5GqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.6a2739b6.chunk.js","sourcesContent":["import React , {useState} from 'react';\n\nconst api = {\n  key: \"6ae4e210f7cb5fce015f786ecfc5d5cc\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n\n}\n\nfunction App() {\n  const [query , setQuery] = useState('');\n  const [weather , setWeather] = useState({});\n\n\n  const search = evt => {\n    if (evt.key ===\"Enter\") {\n      fetch (` ${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n       .then( res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year= d.getFullYear();\n\n    return ` ${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp >16) ? 'App warm' : 'App') : 'App'}>\n \n      <main>\n         <div className=\"brand\">\n           <h1><i className=\"fa fa-sun\"></i> WeatherFind</h1>\n         </div>\n         <div className=\"search-box\">\n           <input \n           type=\"text\"\n           className= \"search-bar\"\n           placeholder = \"search.... (city name)\"\n           onChange= {e => setQuery(e.target.value)}\n           value ={query}\n           onKeyPress= {search}\n           />\n         </div>\n         {(typeof weather.main != \"undefined\") ?(\n           <div>\n              <div className=\"location-box\">\n                  <div className=\"location\">{weather.name} , {weather.sys.country}</div>\n                  <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                  <div className=\"temp\">\n                    {Math.round(weather.main.temp)}°c\n                  </div>\n                  <div className=\"weather \">\n                    {weather.weather[0].main}\n                    \n                  </div>\n                  <div className=\"location-box\">\n                    <div className=\"date \"> <br/> \n                      \"{weather.weather[0].description}\"\n                    </div>\n                 </div>\n                 <div className=\"location-box\">\n                    <div className=\"date \"> \n                    <br/>\n                    <br/>\n                    <br/> \n                      \"Stay tuned for more\"\n                    <br/>\n                    <br/>\n                    <br/> \n                      \n                    </div>\n                 </div>\n                 \n                  \n              </div>\n\n           </div>\n         ) : (\n          <div className=\"location-box\">\n          \n          <div className=\"date\">*enter a valid city </div>\n          \n\n          </div>\n         )}\n         <div className=\"footer\">\n        \n                     \n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    <br/>\n                    \n                    \n                    <br/>\n                    <br/>\n                      Copyright © 2020 |  ❤️ vaishnav | <a href=\"https://github.com/vaishnav-197/WeatherFind.git\"> <i className=\"fa fa-github\"></i></a>\n                    \n        </div>\n        \n            \n      </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}