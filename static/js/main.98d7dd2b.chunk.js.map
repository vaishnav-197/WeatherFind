{"version":3,"sources":["error/ErrorPage.js","components/Forecast.jsx","App.js","index.js"],"names":["errorPage","className","Forecast","api","App","useState","query","setQuery","weather","setWeather","dateConverter","epooch","myDate","Date","toLocaleString","main","temp","bg","icon","src","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","size","cod","ErrorPage","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","feels_like","description","alt","id","temp_max","temp_min","wind","speed","sunrise","sunset","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98d7dd2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './errorPage.css';\r\n\r\n\r\n\r\nfunction errorPage() {\r\n   return(\r\n       <div className=\"error\">\r\n          <h1>Error 404</h1>\r\n          <h1>Requested place was not found or invalid</h1> \r\n          <h2>Please Enter a Valid City</h2>\r\n       </div>\r\n   );\r\n}\r\n\r\n\r\nexport default errorPage;","import React from 'react';\r\nimport './Forecast.css';\r\n\r\n\r\n\r\nfunction Forecast() {\r\n   return(\r\n       <div className=\"forecast\">\r\n          <h3>Stay tuned for forecast....</h3>\r\n          \r\n       </div>\r\n   );\r\n}\r\n\r\n\r\nexport default Forecast;","import React , {useState} from 'react';\nimport {BrowserRouter as Router , Switch , Route} from 'react-router-dom';\nimport ErrorPage from './error/ErrorPage';\nimport Forecast from './components/Forecast';\n\n\n\nconst api = {\n  key: \"6ae4e210f7cb5fce015f786ecfc5d5cc\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n\n}\n\nfunction App() {\n  const [query , setQuery] = useState('');\n  const [weather , setWeather] = useState({});\n\n  \n\n\n  //  api call\n\n    const search = evt => {\n    if (evt.key ===\"Enter\" || evt.key ===\"Click\") {\n      fetch (` ${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n       .then( res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  \n  \n  \n  // to get date\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year= d.getFullYear();\n\n    return ` ${day} ${date} ${month} ${year}`\n  }\n\n\n\n  // epooch to date converter\n\n  const dateConverter = (epooch) => {\n    epooch = epooch*1000;\n    let myDate = new Date(epooch);\n    myDate = myDate.toLocaleString();\n    // myDate = myDate.getTime();\n    return myDate;\n    \n  }\n\n\n  //  background determiner\n\n  const bg = (weather,temp) => {\n    if( weather === \"02d\" || weather === \"03d\" || weather === \"04d\") {\n       return(\"App cloud\");\n    } else if( weather === \"09d\" || weather === \"10d\" ){\n       return(\"App rain\");\n    } else if( weather === \"11d\"){\n       return(\"App thunder\");\n    } else if (weather === \"50d\"){\n       return(\"App mist\");\n    } else if (weather === \"13d\"){\n        return(\"App snow\");\n    } else if(temp >16){\n       return(\"App warm\");\n    } else if (temp <16){\n       return(\"App cold\");\n    }\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? bg(weather.weather[0].icon,weather.main.temp) : 'App'}>\n             \n      <main>\n           \n        {/* Search Box */}\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-3\"></div>\n          <div className=\"col-12 col-sm-6\">\n          <div className=\"brand\">\n           <h1><img src=\"https://img.icons8.com/nolan/96/smiling-sun.png\"/>WeatherFind </h1>\n         </div>\n         <div className=\"search-box\">\n           <input \n           type=\"text\"\n           className= \"search-bar \"\n           placeholder = \"search.... (city name) and press enter\"\n           onChange= {e => setQuery(e.target.value)}\n           value ={query}\n           onKeyPress= {search}\n           size=\"50\"\n           />\n           \n           \n         </div>\n          </div>\n          <div className=\"col-12 col-sm-3\"></div>\n        </div>\n         {/* End of Search Box */}\n\n         \n\n\n         {/* weather contents */}\n         \n\n          <div className=\"row\">\n\n\n         <div className=\"col-12 col-lg-4 \">\n           {/* weather box */}\n           { (weather.cod === \"404\") ? <ErrorPage/> : null}\n         {(typeof weather.main != \"undefined\") ?(\n           <div>\n             \n              <div className=\"location-box\">\n                  <div className=\"location\">{weather.name} , {weather.sys.country}</div>\n                  <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                  <div className=\"temp\">\n                    {Math.round(weather.main.temp)}°c <br/>\n                    <p>\n                    Feels like : {weather.main.feels_like}°c \n                    </p>\n                  </div>\n                  \n                  <div className=\"location-box\">\n                    <div className=\"desc\"> \n                       \n                       \n                      {weather.weather[0].description} :\n                      <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\" />\n                    </div>\n                 </div>\n                                 \n                  \n              </div>\n\n           </div>\n         ) : (\n            null\n         )}\n\n           {/* End of weather box */}\n\n           {/* description component */}\n         </div>\n\n\n\n\n         <div className=\"col-12 col-lg-4  details\">\n            {/* max and min component */}\n            \n              {(typeof weather.main != \"undefined\") ?(\n                <div className=\"more\">\n                <div className=\"temperature\" id=\"de\">\n                  <p>Max : {weather.main.temp_max}°c <br/></p>\n                  <p>Min : {weather.main.temp_min}°c <br/></p>\n                  <p>Wind : {weather.wind.speed } kmph <br/></p>\n                  <p> Sunrise : { dateConverter( weather.sys.sunrise)}  <br/></p>\n                  <p>  Sunset : { dateConverter( weather.sys.sunset)} </p>                \n                  \n                </div>\n                </div>\n              ):(\n              null\n              )\n              }\n            \n         </div>\n\n         <div className=\"col-12 col-lg-4 forecast\">\n           {(typeof weather.main != \"undefined\") ? (\n           \n           <Forecast />)\n           \n           : null}\n           \n         </div>\n\n         \n      \n         </div>  \n            \n      </main>\n\n\n\n      {/* Footer */}\n\n\n      <footer>\n           <p>❤️ vaishnav | <a href=\"https://github.com/vaishnav-197/WeatherFind.git\"> <i className=\"fa fa-github\"></i></a>  </p>\n                    \n      </footer>\n\n\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}